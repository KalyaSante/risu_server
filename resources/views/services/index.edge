@layout('layouts/dashboard')

@section('title')
  Services
@end

@section('main')
  <div class="flex justify-between items-center mb-6">
    <div>
      <h1 class="text-3xl font-bold">‚öôÔ∏è Services</h1>
      <p class="text-base-content/70 mt-1">G√©rez vos services et leurs d√©pendances</p>
    </div>
    <a href="{{ route('services.create') }}" class="btn btn-primary">
      <span>‚ûï</span>
      Nouveau service
    </a>
  </div>

  @if(services.length === 0)
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body text-center py-16">
        <div class="text-6xl mb-4">‚öôÔ∏è</div>
        <h2 class="text-2xl font-bold mb-2">Aucun service configur√©</h2>
        <p class="text-base-content/70 mb-6">Commencez par ajouter votre premier service pour organiser votre infrastructure.</p>
        <a href="{{ route('services.create') }}" class="btn btn-primary">
          <span>‚ûï</span>
          Ajouter un service
        </a>
      </div>
    </div>
  @else
    <!-- Filtres et recherche -->
    <div class="card bg-base-100 shadow-xl mb-6">
      <div class="card-body py-4">
        <div class="flex flex-wrap gap-4 items-center">
          <div class="form-control">
            <input
              type="text"
              id="search-services"
              placeholder="Rechercher un service..."
              class="input input-bordered input-sm w-64"
              value="{{ search || '' }}"
            >
          </div>
          <div class="form-control">
            <select id="filter-server" class="select select-bordered select-sm">
              <option value="">Tous les serveurs</option>
              @each(server in servers)
                <option value="{{ server.id }}" {{ selectedServerId == server.id ? 'selected' : '' }}>
                  {{ server.nom }}
                </option>
              @end
            </select>
          </div>
          <div class="form-control">
            <select id="filter-maintenance" class="select select-bordered select-sm">
              <option value="">Toutes les maintenances</option>
              <option value="recent">R√©cente (< 7 jours)</option>
              <option value="warning">Ancienne (7-30 jours)</option>
              <option value="critical">Critique (> 30 jours)</option>
            </select>
          </div>
          <div class="flex-1"></div>
          <div class="stats stats-horizontal shadow">
            {{-- Stats total services --}}
            <div class="stat">
              <div class="stat-title">Total services</div>
              <div class="stat-value text-primary">{{ services.length }}</div>
            </div>
            {{-- Stats d√©pendances --}}
            <div class="stat">
              <div class="stat-title">D√©pendances</div>
              <div class="stat-value text-secondary">{{ services.reduce((acc, s) => acc + (s.dependencies?.length || 0), 0) }}</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Grille des services -->
    <div id="services-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      @each(service in services)
        @set('daysSinceMaintenance', service.lastMaintenanceAt ? Math.floor((Date.now() - new Date(service.lastMaintenanceAt).getTime()) / (1000 * 60 * 60 * 24)) : 999)
        @set('maintenanceStatus', daysSinceMaintenance <= 7 ? 'recent' : daysSinceMaintenance <= 30 ? 'warning' : 'critical')

        <div class="service-card"
             data-name="{{ service.nom.toLowerCase() }}"
             data-server="{{ service.serverId }}"
             data-maintenance="{{ maintenanceStatus }}">
          {{-- Carte service inline --}}
          <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow">
            <div class="card-body">
              <div class="flex justify-between items-start">
                <div>
                  <h2 class="card-title">{{ service.nom }}</h2>
                  @if(service.server)
                    <p class="text-sm text-base-content/70">üìç {{ service.server.nom }}</p>
                  @endif
                  @if(service.path)
                    <p class="text-sm text-base-content/70">{{ service.path }}</p>
                  @endif
                </div>
                @if(service.icon)
                  <div class="text-3xl">{{ service.icon }}</div>
                @endif
              </div>

              @if(service.lastMaintenanceAt)
                @set('daysSince', Math.floor((Date.now() - new Date(service.lastMaintenanceAt).getTime()) / (1000 * 60 * 60 * 24)))
                <div class="mt-3">
                  <div class="badge {{ daysSince <= 7 ? 'badge-success' : daysSince <= 30 ? 'badge-warning' : 'badge-error' }} badge-sm">
                    Maintenance il y a {{ daysSince }} jour{{ daysSince > 1 ? 's' : '' }}
                  </div>
                </div>
              @else
                <div class="mt-3">
                  <div class="badge badge-ghost badge-sm">Jamais maintenu</div>
                </div>
              @endif

              @if(service.dependencies && service.dependencies.length > 0)
                <div class="mt-3">
                  <p class="text-xs text-base-content/50">{{ service.dependencies.length }} d√©pendance{{ service.dependencies.length > 1 ? 's' : '' }}</p>
                </div>
              @endif

              <div class="card-actions justify-end mt-4">
                <a href="{{ route('services.show', { id: service.id }) }}" class="btn btn-primary btn-sm">Voir</a>
                <a href="{{ route('services.edit', { id: service.id }) }}" class="btn btn-secondary btn-sm">Modifier</a>
              </div>
            </div>
          </div>
        </div>
      @end
    </div>

    <!-- Pagination -->
    @if(services.hasPages)
      <div class="flex justify-center mt-8">
        <div class="btn-group">
          @if(services.hasPreviousPage)
            <a href="{{ services.previousPageUrl }}" class="btn">¬´ Pr√©c√©dent</a>
          @endif

          @each(page in services.getUrlsForRange(1, services.lastPage))
            <a href="{{ page.url }}" class="btn {{ page.isActive ? 'btn-active' : '' }}">
              {{ page.page }}
            </a>
          @end

          @if(services.hasNextPage)
            <a href="{{ services.nextPageUrl }}" class="btn">Suivant ¬ª</a>
          @endif
        </div>
      </div>
    @endif
  @endif
@end

@section('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('search-services');
  const serverFilter = document.getElementById('filter-server');
  const maintenanceFilter = document.getElementById('filter-maintenance');
  const serviceCards = document.querySelectorAll('.service-card');

  // Fonction de filtrage
  function filterServices() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    const selectedServer = serverFilter?.value || '';
    const selectedMaintenance = maintenanceFilter?.value || '';

    serviceCards.forEach(card => {
      const name = card.dataset.name || '';
      const server = card.dataset.server || '';
      const maintenance = card.dataset.maintenance || '';

      const matchesSearch = name.includes(searchTerm);
      const matchesServer = !selectedServer || server === selectedServer;
      const matchesMaintenance = !selectedMaintenance || maintenance === selectedMaintenance;

      if (matchesSearch && matchesServer && matchesMaintenance) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });

    // Compter les r√©sultats visibles
    const visibleCards = Array.from(serviceCards).filter(card => card.style.display !== 'none');
    updateResultsCount(visibleCards.length, serviceCards.length);
  }

  // Fonction pour mettre √† jour le compteur de r√©sultats
  function updateResultsCount(visible, total) {
    let counter = document.getElementById('results-counter');
    if (!counter) {
      counter = document.createElement('div');
      counter.id = 'results-counter';
      counter.className = 'text-sm text-base-content/70 mt-2';
      document.getElementById('services-grid').parentNode.insertBefore(counter, document.getElementById('services-grid'));
    }

    if (visible === total) {
      counter.textContent = `${total} service${total > 1 ? 's' : ''}`;
    } else {
      counter.textContent = `${visible} sur ${total} service${total > 1 ? 's' : ''}`;
    }
  }

  // √âcouteurs d'√©v√©nements
  searchInput?.addEventListener('input', filterServices);
  serverFilter?.addEventListener('change', filterServices);
  maintenanceFilter?.addEventListener('change', filterServices);

  // Initialiser le compteur
  updateResultsCount(serviceCards.length, serviceCards.length);
});
</script>
@end
