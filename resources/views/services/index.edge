@layout('layouts/dashboard')

@section('title')
  Services
@end

@section('main')
  <div class="flex justify-between items-center mb-6">
    <div>
      <h1 class="text-3xl font-bold">⚙️ Services</h1>
      <p class="text-base-content/70 mt-1">Gérez vos services et leurs dépendances</p>
    </div>
    @include('components/action-button', { 
      href: route('services.create'), 
      type: 'primary', 
      icon: '➕', 
      text: 'Nouveau service' 
    })
  </div>

  @if(services.length === 0)
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body text-center py-16">
        <div class="text-6xl mb-4">⚙️</div>
        <h2 class="text-2xl font-bold mb-2">Aucun service configuré</h2>
        <p class="text-base-content/70 mb-6">Commencez par ajouter votre premier service pour organiser votre infrastructure.</p>
        @include('components/action-button', { 
          href: route('services.create'), 
          type: 'primary', 
          icon: '➕', 
          text: 'Ajouter un service' 
        })
      </div>
    </div>
  @else
    <!-- Filtres et recherche -->
    <div class="card bg-base-100 shadow-xl mb-6">
      <div class="card-body py-4">
        <div class="flex flex-wrap gap-4 items-center">
          <div class="form-control">
            <input 
              type="text" 
              id="search-services" 
              placeholder="Rechercher un service..." 
              class="input input-bordered input-sm w-64"
              value="{{ search || '' }}"
            >
          </div>
          <div class="form-control">
            <select id="filter-server" class="select select-bordered select-sm">
              <option value="">Tous les serveurs</option>
              @each(server in servers)
                <option value="{{ server.id }}" {{ selectedServerId == server.id ? 'selected' : '' }}>
                  {{ server.nom }}
                </option>
              @end
            </select>
          </div>
          <div class="form-control">
            <select id="filter-maintenance" class="select select-bordered select-sm">
              <option value="">Toutes les maintenances</option>
              <option value="recent">Récente (< 7 jours)</option>
              <option value="warning">Ancienne (7-30 jours)</option>
              <option value="critical">Critique (> 30 jours)</option>
            </select>
          </div>
          <div class="flex-1"></div>
          <div class="stats stats-horizontal shadow">
            @include('components/stats-card', { 
              title: 'Total services', 
              value: services.length, 
              color: 'primary' 
            })
            @include('components/stats-card', { 
              title: 'Dépendances', 
              value: services.reduce((acc, s) => acc + (s.dependencies?.length || 0), 0),
              color: 'secondary' 
            })
          </div>
        </div>
      </div>
    </div>

    <!-- Grille des services -->
    <div id="services-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      @each(service in services)
        @set('daysSinceMaintenance', service.lastMaintenanceAt ? Math.floor((Date.now() - new Date(service.lastMaintenanceAt).getTime()) / (1000 * 60 * 60 * 24)) : 999)
        @set('maintenanceStatus', daysSinceMaintenance <= 7 ? 'recent' : daysSinceMaintenance <= 30 ? 'warning' : 'critical')
        
        <div class="service-card" 
             data-name="{{ service.nom.toLowerCase() }}" 
             data-server="{{ service.serverId }}"
             data-maintenance="{{ maintenanceStatus }}">
          @include('components/service-card', { service, showServer: true })
        </div>
      @end
    </div>

    <!-- Pagination -->
    @if(services.hasPages)
      <div class="flex justify-center mt-8">
        <div class="btn-group">
          @if(services.hasPreviousPage)
            <a href="{{ services.previousPageUrl }}" class="btn">« Précédent</a>
          @endif
          
          @each(page in services.getUrlsForRange(1, services.lastPage))
            <a href="{{ page.url }}" class="btn {{ page.isActive ? 'btn-active' : '' }}">
              {{ page.page }}
            </a>
          @end
          
          @if(services.hasNextPage)
            <a href="{{ services.nextPageUrl }}" class="btn">Suivant »</a>
          @endif
        </div>
      </div>
    @endif
  @endif
@end

@section('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('search-services');
  const serverFilter = document.getElementById('filter-server');
  const maintenanceFilter = document.getElementById('filter-maintenance');
  const serviceCards = document.querySelectorAll('.service-card');
  
  // Fonction de filtrage
  function filterServices() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    const selectedServer = serverFilter?.value || '';
    const selectedMaintenance = maintenanceFilter?.value || '';
    
    serviceCards.forEach(card => {
      const name = card.dataset.name || '';
      const server = card.dataset.server || '';
      const maintenance = card.dataset.maintenance || '';
      
      const matchesSearch = name.includes(searchTerm);
      const matchesServer = !selectedServer || server === selectedServer;
      const matchesMaintenance = !selectedMaintenance || maintenance === selectedMaintenance;
      
      if (matchesSearch && matchesServer && matchesMaintenance) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
    
    // Compter les résultats visibles
    const visibleCards = Array.from(serviceCards).filter(card => card.style.display !== 'none');
    updateResultsCount(visibleCards.length, serviceCards.length);
  }
  
  // Fonction pour mettre à jour le compteur de résultats
  function updateResultsCount(visible, total) {
    let counter = document.getElementById('results-counter');
    if (!counter) {
      counter = document.createElement('div');
      counter.id = 'results-counter';
      counter.className = 'text-sm text-base-content/70 mt-2';
      document.getElementById('services-grid').parentNode.insertBefore(counter, document.getElementById('services-grid'));
    }
    
    if (visible === total) {
      counter.textContent = `${total} service${total > 1 ? 's' : ''}`;
    } else {
      counter.textContent = `${visible} sur ${total} service${total > 1 ? 's' : ''}`;
    }
  }
  
  // Écouteurs d'événements avec debounce pour la recherche
  searchInput?.addEventListener('input', AppUtils.debounce(filterServices, 300));
  serverFilter?.addEventListener('change', filterServices);
  maintenanceFilter?.addEventListener('change', filterServices);
  
  // Initialiser le compteur
  updateResultsCount(serviceCards.length, serviceCards.length);
});
</script>
@end
