#!/bin/bash

# Script de d√©ploiement Cloudron pour Risu Server
# Utilise les corrections impl√©ment√©es par Meika

set -euo pipefail

echo "üöÄ D√©ploiement Cloudron - Risu Server"
echo "======================================="

# Configuration
IMAGE_NAME="ghcr.io/kalyasante/risu_server_cloudron"
TAG_FIXED="fixed"
CLOUDRON_APP="risu.marill.dev"

# V√©rifications pr√©alables
echo "üìã V√©rifications pr√©alables..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v cloudron &> /dev/null; then
    echo "‚ùå Cloudron CLI n'est pas install√©"
    exit 1
fi

echo "‚úÖ Pr√©requis v√©rifi√©s"

# √âtape 1 : Construction de l'image corrig√©e
echo ""
echo "üî® √âtape 1: Construction de l'image Docker corrig√©e"
echo "Image: ${IMAGE_NAME}:${TAG_FIXED}"

docker build -f Dockerfile.cloudron -t "${IMAGE_NAME}:${TAG_FIXED}" . || {
    echo "‚ùå √âchec de la construction de l'image"
    exit 1
}

echo "‚úÖ Image construite avec succ√®s"

# √âtape 2 : Push vers le registry
echo ""
echo "üì§ √âtape 2: Push vers le registry GitHub"

docker push "${IMAGE_NAME}:${TAG_FIXED}" || {
    echo "‚ùå √âchec du push vers le registry"
    exit 1
}

echo "‚úÖ Image pouss√©e vers le registry"

# √âtape 3 : V√©rification de l'app Cloudron existante
echo ""
echo "üîç √âtape 3: V√©rification de l'app existante"

if cloudron list | grep -q "$CLOUDRON_APP"; then
    echo "‚ö†Ô∏è  App existante d√©tect√©e: $CLOUDRON_APP"
    read -p "Voulez-vous la d√©sinstaller et r√©installer ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üóëÔ∏è  D√©sinstallation de l'ancienne app..."
        cloudron uninstall --app "$CLOUDRON_APP" || {
            echo "‚ö†Ô∏è  √âchec de la d√©sinstallation (app peut-√™tre d√©j√† en erreur)"
        }
        echo "‚úÖ Ancienne app supprim√©e"
    else
        echo "üîÑ Mise √† jour de l'app existante..."
        cloudron update --app "$CLOUDRON_APP" --image "${IMAGE_NAME}:${TAG_FIXED}" || {
            echo "‚ùå √âchec de la mise √† jour"
            exit 1
        }
        echo "‚úÖ App mise √† jour avec succ√®s"
        exit 0
    fi
else
    echo "‚úÖ Aucune app existante trouv√©e"
fi

# √âtape 4 : Installation de la nouvelle app
echo ""
echo "üì¶ √âtape 4: Installation de la nouvelle app"

cloudron install --image "${IMAGE_NAME}:${TAG_FIXED}" --location "$CLOUDRON_APP" || {
    echo "‚ùå √âchec de l'installation"
    exit 1
}

echo "‚úÖ App install√©e avec succ√®s"

# √âtape 5 : V√©rifications post-installation
echo ""
echo "üß™ √âtape 5: V√©rifications post-installation"

echo "‚è≥ Attente de la mont√©e de l'app (30s)..."
sleep 30

# Test de sant√©
echo "üè• Test de sant√© de l'app..."
if curl -f -s "https://$CLOUDRON_APP" > /dev/null; then
    echo "‚úÖ App accessible et fonctionnelle"
else
    echo "‚ö†Ô∏è  App accessible mais peut rediriger (normal pour /login)"
fi

# Status de l'app
echo "üìä Status de l'app:"
cloudron status --app "$CLOUDRON_APP" || echo "‚ö†Ô∏è  Impossible d'obtenir le status"

# Logs r√©cents
echo ""
echo "üìù Logs r√©cents (derni√®res 10 lignes):"
cloudron logs --app "$CLOUDRON_APP" --lines 10 || echo "‚ö†Ô∏è  Impossible d'obtenir les logs"

echo ""
echo "üéâ D√©ploiement termin√© !"
echo "==================="
echo "URL: https://$CLOUDRON_APP"
echo "Status: cloudron status --app $CLOUDRON_APP"
echo "Logs: cloudron logs --app $CLOUDRON_APP"
echo ""

# Instructions finales
echo "üìã Prochaines √©tapes:"
echo "1. Tester l'acc√®s √† https://$CLOUDRON_APP"
echo "2. V√©rifier la connexion OAuth Cloudron"
echo "3. Tester les fonctionnalit√©s de base"
echo "4. Surveiller les logs pour s'assurer de la stabilit√©"

echo ""
echo "‚ú® Correction des probl√®mes Cloudron appliqu√©e avec succ√®s ! ‚ú®"