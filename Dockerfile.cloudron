# ===================================
# Stage 1: Build stage
# ===================================
FROM node:20-alpine AS builder

# Set the working directory
WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install ALL dependencies (including devDependencies needed for build)
RUN npm ci

# Copy source code
COPY . .

# Run the build command (needs devDependencies)
RUN npm run build

# ===================================
# Stage 2: Node.js binaries stage
# ===================================
FROM node:20-alpine AS node_binaries

# ===================================
# Stage 3: Production stage for Cloudron
# ===================================
FROM cloudron/base:4.2.0

# Set the working directory
WORKDIR /app/code

# Copy Node.js binaries from official image
COPY --from=node_binaries /usr/local/bin/node /usr/local/bin/node
COPY --from=node_binaries /usr/local/bin/npm /usr/local/bin/npm
COPY --from=node_binaries /usr/local/bin/npx /usr/local/bin/npx
COPY --from=node_binaries /usr/local/lib/node_modules /usr/local/lib/node_modules

# Create symlinks for compatibility
RUN ln -sf /usr/local/bin/node /usr/bin/node && \
    ln -sf /usr/local/bin/npm /usr/bin/npm && \
    ln -sf /usr/local/bin/npx /usr/bin/npx

# Copy package files
COPY package.json package-lock.json ./

# Install ONLY production dependencies
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/build ./build

# Copy other necessary files
COPY --from=builder /app/public ./public

# Create the Cloudron manifest
COPY CloudronManifest.json /app/code/

# Create necessary directories with proper permissions
# CORRECTION : Ne pas cr√©er de sous-dossiers dans /app/data
RUN mkdir -p /run/app && \
    chown -R cloudron:cloudron /run/app

# Create the corrected start script directly in the image
RUN cat > /app/code/start.sh << 'EOF'
#!/bin/bash

set -euo pipefail

echo "Starting Risu Server..."

# ===================================
# D√©tection automatique d'environnement
# ===================================
if [ -n "${CLOUDRON_APP_ORIGIN:-}" ]; then
    ENVIRONMENT="cloudron"
    echo "üå©Ô∏è  Cloudron environment detected"
elif [ -n "${DOCKER_ENV:-}" ] || [ -f /.dockerenv ]; then
    ENVIRONMENT="docker"
    echo "üê≥ Docker classic environment detected"
else
    ENVIRONMENT="local"
    echo "üíª Local development environment detected"
fi

# ===================================
# Configuration selon l'environnement
# ===================================

# Variables communes
export NODE_ENV=${NODE_ENV:-production}
export PORT=${PORT:-3333}
export HOST=${HOST:-0.0.0.0}
export LOG_LEVEL=${LOG_LEVEL:-info}
export SESSION_DRIVER=${SESSION_DRIVER:-cookie}
export TZ=${TZ:-UTC}

# Configuration sp√©cifique par environnement
case $ENVIRONMENT in
    "cloudron")
        echo "üîß Configuring for Cloudron..."

        # APP_KEY pour Cloudron
        if [ ! -f /app/data/app.key ]; then
            echo "Generating application key for Cloudron..."
            node -e "console.log(require('crypto').randomBytes(32).toString('base64'))" > /app/data/app.key
        fi
        APP_KEY=$(cat /app/data/app.key)

        # Base de donn√©es Cloudron - utiliser directement /app/data
        export DB_CONNECTION=sqlite
        export DB_DATABASE=/app/data/app.sqlite

        # OAuth Cloudron
        if [ -n "${OAUTH_CLIENT_ID:-}" ]; then
            export OAUTH_BASE_URL="https://${CLOUDRON_API_ORIGIN}"
            export OAUTH_CLIENT_ID="${OAUTH_CLIENT_ID}"
            export OAUTH_CLIENT_SECRET="${OAUTH_CLIENT_SECRET}"
            export OAUTH_REDIRECT_URI="https://${CLOUDRON_APP_ORIGIN}/auth/callback"
            export OAUTH_SCOPES="profile,email"
            export OAUTH_ENDPOINT_AUTHORIZE="/api/v1/oauth/authorize"
            export OAUTH_ENDPOINT_TOKEN="/api/v1/oauth/token"
            export OAUTH_ENDPOINT_USER_INFO="/api/v1/profile"
            export OAUTH_USER_FIELD_ID="id"
            export OAUTH_USER_FIELD_EMAIL="email"
            export OAUTH_USER_FIELD_NAME="displayName"
        fi

        # Chemins de stockage Cloudron - utiliser directement /app/data
        export UPLOAD_PATH=/app/data
        export LOG_PATH=/run/app
        ;;

    *)
        echo "‚ö†Ô∏è  Non-Cloudron environment, using defaults..."

        # Configuration par d√©faut pour autres environnements
        mkdir -p /app/data/database /app/data/uploads /app/logs

        if [ ! -f /app/data/app.key ]; then
            echo "Generating application key..."
            node -e "console.log(require('crypto').randomBytes(32).toString('base64'))" > /app/data/app.key
        fi
        APP_KEY=$(cat /app/data/app.key)

        export DB_CONNECTION=${DB_CONNECTION:-sqlite}
        export DB_DATABASE=${DB_DATABASE:-/app/data/database/app.sqlite}
        export UPLOAD_PATH=${UPLOAD_PATH:-/app/data/uploads}
        export LOG_PATH=${LOG_PATH:-/app/logs}
        ;;
esac

# Variables d'environnement finales
export APP_KEY="$APP_KEY"

# ===================================
# Initialisation base de donn√©es
# ===================================

# Cr√©er la base si elle n'existe pas (SQLite)
if [ "$DB_CONNECTION" = "sqlite" ] && [ ! -f "$DB_DATABASE" ]; then
    echo "Creating SQLite database: $DB_DATABASE"
    mkdir -p "$(dirname "$DB_DATABASE")"
    touch "$DB_DATABASE"
    chmod 640 "$DB_DATABASE"
fi

# ===================================
# Migrations et d√©marrage
# ===================================

echo "Running database migrations..."

# CORRECTION CRITIQUE : Assurer le bon r√©pertoire de travail
cd /app/code

# CORRECTION : Migration non-interactive pour la production
echo "Running migrations in non-interactive mode..."
echo "y" | node build/bin/console.js migration:run || {
    echo "Migrations failed, but continuing..."
}

echo "Starting Risu Server on $HOST:$PORT in $ENVIRONMENT mode..."
exec node build/bin/server.js
EOF

# Make the start script executable
RUN chmod +x /app/code/start.sh

# Expose the port
EXPOSE 3333

# Switch to cloudron user
USER cloudron

# Define the command to run the application
CMD [ "/app/code/start.sh" ]
